// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)
    accounts      Account[]
    sessions      Session[]
    blogs         Blog[]
    posts         Post[]
    comments      Comment[]
    likes         Like[]
    bookmarks     Bookmark[]
    analytics     Analytics[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Blog {
    id          String    @id @default(cuid())
    title       String
    slug        String    @unique
    excerpt     String
    content     String    @db.Text
    status      String    @default("draft")
    publishedAt DateTime?
    views       Int       @default(0)
    authorId    String
    author      User      @relation(fields: [authorId], references: [id])
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@index([authorId])
}

model Project {
    id          String   @id @default(cuid())
    title       String
    slug        String   @unique
    description String
    image       String?
    tags        String[]
    demoUrl     String?
    githubUrl   String?
    featured    Boolean  @default(false)
    status      String   @default("draft")
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([slug])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
    id          String      @id @default(cuid())
    title       String
    slug        String      @unique
    content     String      @db.Text
    excerpt     String?     @db.Text
    status      PostStatus  @default(DRAFT)
    featured    Boolean     @default(false)
    published   Boolean     @default(false)
    publishedAt DateTime?
    authorId    String
    author      User        @relation(fields: [authorId], references: [id])
    categories  Category[]
    tags        Tag[]
    comments    Comment[]
    likes       Like[]
    bookmarks   Bookmark[]
    analytics   Analytics[]
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    @@index([slug])
    @@index([authorId])
}

model Category {
    id          String     @id @default(cuid())
    name        String     @unique
    slug        String     @unique
    description String?    @db.Text
    posts       Post[]
    parentId    String?
    parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
    children    Category[] @relation("CategoryHierarchy")
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt

    @@index([slug])
}

model Tag {
    id          String   @id @default(cuid())
    name        String   @unique
    slug        String   @unique
    description String?  @db.Text
    posts       Post[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([slug])
}

model Comment {
    id        String        @id @default(cuid())
    content   String        @db.Text
    authorId  String
    author    User          @relation(fields: [authorId], references: [id])
    postId    String
    post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
    parentId  String?
    parent    Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
    replies   Comment[]     @relation("CommentReplies")
    status    CommentStatus @default(PENDING)
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt

    @@index([postId])
    @@index([authorId])
}

model Like {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    postId    String
    post      Post     @relation(fields: [postId], references: [id])
    createdAt DateTime @default(now())

    @@unique([userId, postId])
    @@index([postId])
}

model Bookmark {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    postId    String
    post      Post     @relation(fields: [postId], references: [id])
    createdAt DateTime @default(now())

    @@unique([userId, postId])
    @@index([postId])
}

model Analytics {
    id        String    @id @default(cuid())
    postId    String?
    post      Post?     @relation(fields: [postId], references: [id])
    userId    String?
    user      User?     @relation(fields: [userId], references: [id])
    pageView  Boolean   @default(true)
    event     String?
    metadata  Json?
    createdAt DateTime  @default(now())

    @@index([postId])
    @@index([userId])
}

model Newsletter {
    id        String             @id @default(cuid())
    email     String             @unique
    status    SubscriptionStatus @default(ACTIVE)
    createdAt DateTime           @default(now())
    updatedAt DateTime           @updatedAt
}

model ContactSubmission {
    id        String   @id @default(cuid())
    name      String
    email     String
    subject   String
    message   String   @db.Text
    createdAt DateTime @default(now())
    status    Status   @default(PENDING)
    metadata  Json?
}

enum Role {
    ADMIN
    USER
}

enum PostStatus {
    DRAFT
    PUBLISHED
    ARCHIVED
}

enum CommentStatus {
    PENDING
    APPROVED
    SPAM
    DELETED
}

enum Status {
    PENDING
    READ
    REPLIED
    ARCHIVED
}

enum SubscriptionStatus {
    ACTIVE
    UNSUBSCRIBED
    BOUNCED
} 